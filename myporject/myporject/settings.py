"""
Django settings for myporject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os 
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@yhabz4o^0ieewc5(diw731l=vun1h#ft+8x)j8likh%_w6u(a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myporject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
              os.path.join(BASE_DIR, 'myapp/templates/myapp'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myporject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # This line is correct!
        'NAME': 'postgres',                       # Correct: This should be your database name
        'USER': 'postgres',
        'PASSWORD': '12345687',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    },
    'mongodb': {
        'ENGINE': 'djongo',
        'NAME': 'sessiondb',
        'CLIENT': {
            'host': 'localhost',
            'port': 27017,
        }
    }
}


# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Use database 1 for sessions
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS=[
              BASE_DIR / 'static',
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
DATABASE_ROUTERS = ['myporject.routers.MongoDBRouter']
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Optional: for browsable API/admin
        'rest_framework.authentication.BasicAuthentication', # Optional
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    ),
}

# Configure Simple JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),  # How long access tokens are valid
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),   # How long refresh tokens are valid
    "ROTATE_REFRESH_TOKENS": False,                # If true, refresh tokens are rotated after use
    "BLACKLIST_AFTER_ROTATION": False,            # If true, old refresh tokens are blacklisted after rotation

    "ALGORITHM": "HS256",                          # Signing algorithm for the JWT
    "SIGNING_KEY": SECRET_KEY,                     # Django's SECRET_KEY is used for signing (important!)
    "VERIFYING_KEY": "",                           # Not strictly needed if SIGNING_KEY is set
    "AUDIENCE": None,                              # JWT audience claim
    "ISSUER": None,                                # JWT issuer claim
    "JWK_URL": None,                               # URL for JSON Web Key Set (JWKS)
    "LEEWAY": 0,                                   # Leeway for clock skew (in seconds)

    "AUTH_HEADER_TYPES": ("Bearer",),              # How tokens are expected in the Authorization header
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",     # Header name for tokens
    "USER_ID_FIELD": "id",                         # Field to identify user in JWT payload
    "USER_ID_CLAIM": "user_id",                    # Claim name for user ID in JWT payload
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",             # Claim name for token type

    "JTI_CLAIM": "jti",                           # JWT ID claim for blacklisting

    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5), # For sliding tokens
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1), # For sliding tokens
}